/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (2.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Tue Sep  2 16:54:08 2025


#ifndef GPTDEVICE_PARAMSPARSER_H
#define GPTDEVICE_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class GPTDevice.
*
* These are the used parameters:
* | Group name | Parameter name | Type   | Units | Default Value      | Required | Description                                                    | Notes |
* |:----------:|:--------------:|:------:|:-----:|:------------------:|:--------:|:--------------------------------------------------------------:|:-----:|
* | -          | api_version    | string | -     | 2023-07-01-preview | 0        | The openAI APIs version to use                                 | -     |
* | -          | prompt_file    | string | -     | -                  | 0        | The file containing the prompt for the LLM                     | -     |
* | -          | prompt_context | string | -     | GPTDevice          | 0        | The yarp context from which the prompt file should be loaded   | -     |
* | -          | function_file  | string | -     | -                  | 0        | The file containing the definitions of the tools for the LLM   | -     |
* | -          | json_context   | string | -     | GPTDevice          | 0        | The yarp context from which the function file should be loaded | -     |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device GPTDevice --api_version 2023-07-01-preview --prompt_file <optional_value> --prompt_context GPTDevice --function_file <optional_value> --json_context GPTDevice
* \endcode
*
* \code{.unparsed}
* yarpdev --device GPTDevice
* \endcode
*
*/

class GPTDevice_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    GPTDevice_ParamsParser();
    ~GPTDevice_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"GPTDevice"};
    const std::string m_device_name = {"GPTDevice"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 2;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    std::string m_provided_configuration;

    const std::string m_api_version_defaultValue = {"2023-07-01-preview"};
    const std::string m_prompt_file_defaultValue = {""};
    const std::string m_prompt_context_defaultValue = {"GPTDevice"};
    const std::string m_function_file_defaultValue = {""};
    const std::string m_json_context_defaultValue = {"GPTDevice"};

    std::string m_api_version = {"2023-07-01-preview"};
    std::string m_prompt_file = {}; //This default value of this string is an empty string. It is highly recommended to provide a suggested value also for optional string parameters.
    std::string m_prompt_context = {"GPTDevice"};
    std::string m_function_file = {}; //This default value of this string is an empty string. It is highly recommended to provide a suggested value also for optional string parameters.
    std::string m_json_context = {"GPTDevice"};

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
    bool getParamValue(const std::string& paramName, std::string& paramValue) const override;
    std::string   getConfiguration() const override;
};

#endif
